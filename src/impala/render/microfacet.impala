// Similar to a BSDF 
struct MicrofacetDistribution {
    eval: fn (Vec3, Vec3, SpectralWavelength) -> SpectralWeight,
    pdf: fn (Vec3, Vec3, SpectralWavelength) -> SpectralPDF,
    sample: fn (&mut RndState, Vec3, SpectralWavelength) -> (Vec3, SpectralPDF, SpectralWeight)
}

// FIXME: This pretty much requires operator overloading to be feasible to code
fn make_ggx_distribution(math: Intrinsics, surf: SurfaceElement, alpha: Spectrum) -> MicrofacetDistribution {
    let a2 = spectum_mul(alpha, alpha);
    MicrofacetDistribution {
        eval: @|wi,wo,wvl| {
            let ndotl = vec3_dot(surf.local.col(2),wi);
            let ndotv = vec3_dot(surf.local.col(2),wo);
            let ka2   = spectrum_eval(a2, wvl);
            let denomA = ndotv * math.sqrtf(ka2 + (1.0f - ka2) * ndotl * ndotl);
            let denomB = ndotl * math.sqrtf(ka2 + (1.0f - ka2) * ndotv * ndotv);
            2.0f * ndotl * ndotv / (denomA + denomB)
        },
        pdf: @|wi,wo,wvl| { 
            let h = vec3_normalize(math, vec3_add(wi,wo));
            let ndoth = vec3_dot(surf.local.col(2), h);
            1.0f/(flt_pi * spectrum_eval(a2, wvl) * ndoth * ndoth * ndoth * 4)
        },
        sample: @ |rnd, out_dir, wvl| {
            let u0 = randf(rnd);
            let u1 = randf(rnd);
            let ka2   = spectrum_eval(a2, wvl);
            let t2 = ka2 * u1 / (1.0f - u1);
            let cosTheta = 1.0f/math.sqrtf(1+ t2);
            let sinTheta = math.sqrtf(1 - cosTheta * cosTheta);
            let cosPhi   = math.cosf(2.0f * flt_pi * u0);
            let sinPhi   = math.sinf(2.0f * flt_pi * u0);

            let s = 1.0f + u1 / (1.0f - u1);
            let pdf = 1.0f / (flt_pi * ka2 * cosTheta * cosTheta * cosTheta * s * s);
            let h = make_vec3(sinTheta * cosPhi, sinTheta * sinPhi, cosTheta);
            (vec3_reflect(out_dir, h), pdf, )
        },
    }
}
// Opaque material structure
struct Material {
    bsdf:        Bsdf,
    emission:    fn (Vec3) -> EmissionValue,
    is_emissive: bool
}

struct RefractiveIndex {
    eval:       fn(f32) -> f32,
    is_varying: bool
}

fn @make_const_refractive_index(n: f32) -> RefractiveIndex {
    RefractiveIndex {
        eval: @|_| { n },
        is_varying: false
    }
}

fn @make_varying_refractive_index(n: fn(f32) -> f32) -> RefractiveIndex {
    RefractiveIndex {
        eval: n,
        is_varying: true
    }
}

fn @make_spectral_refractive_index(s: Spectrum) -> RefractiveIndex {
    make_varying_refractive_index(@|wvl| s.value(wvl))
}

// https://refractiveindex.info/?shelf=glass&book=BK7&page=HIKARI
fn @make_bk7_refractive_index(math: Intrinsics) -> RefractiveIndex {
    make_varying_refractive_index(@|wvl| {
        let um = wvl / 1000.0f;// To micro meters
        let um2 = um*um;
        let n2 = 2.27110883f - 0.00938988354f*um2 - 0.000100277081f*um2*um2 + 0.0109572221f/um2 + 0.000120210067f/(um2 * um2);
        max_2_f32(math.sqrtf(n2), 1.0f)
    })
}

// Opaque description of a point on a surface
struct SurfaceElement {
    is_entering: bool,              // True if the path enters the surface
    point:       Vec3,              // Point on the surface
    face_normal: Vec3,              // Geometric normal at the surface point
    uv_coords:   Vec2,              // UV coordinates on the surface
    attr:        fn (i32) -> Vec4,  // Vertex attributes (interpolated)
    local:       Mat3x3             // Local coordinate system at the surface point
}

// Result of sampling a BSDF
struct BsdfSample {
    in_dir: Vec3,           // Sampled direction
    pdf:    SpectralPDF,    // BSDF value for the sample
    cos:    f32,            // Cosine between the sampled direction and the surface normal
    color:  SpectralWeight  // Color of the sample
}

// Opaque BSDF structure
struct Bsdf {
    // Evaluates the reflectance of the material for the given pair of directions
    eval: fn (Vec3, Vec3, SpectralWavelength) -> SpectralWeight,
    // Evaluates the sampling probability density for a given pair of directions
    pdf: fn (Vec3, Vec3, SpectralWavelength) -> SpectralPDF,
    // Samples a direction
    sample: fn (&mut RndState, Vec3, SpectralWavelength, bool) -> BsdfSample,
    // Returns true if the material is purely specular
    is_specular: bool
}

fn @fresnel_factor(k: f32, cos_i: f32, cos_t: f32) -> f32 {
    let R_s = (k * cos_i - cos_t) / (k * cos_i + cos_t);
    let R_p = (cos_i - k * cos_t) / (cos_i + k * cos_t);
    (R_s * R_s + R_p * R_p) * 0.5f
}

// Creates a material with no emission
fn @make_material(bsdf: Bsdf) -> Material {
    Material {
        bsdf:        bsdf,
        emission:    @ |_| make_emission_value_none(),
        is_emissive: false
    }
}

// Creates a material that emits light
fn @make_emissive_material(surf: SurfaceElement, bsdf: Bsdf, light: Light) -> Material {
    Material {
        bsdf: bsdf,
        emission: @ |in_dir| light.emission(in_dir, surf.uv_coords),
        is_emissive: true
    }
}

// Creates a BSDF sample and checks that it lies on the right side of the surface
fn @make_bsdf_sample(surf: SurfaceElement, in_dir: Vec3, pdf: SpectralPDF, cos: f32, color: SpectralWeight, inverted: bool) -> BsdfSample {
    // Checks that the sample is above the surface (or under it if inverted is true)
    let valid = (pdf.hero > 0.0f && pdf.s1 >= 0.0f && pdf.s2 >= 0.0f && pdf.s3 >= 0.0f) 
                && (inverted ^ (vec3_dot(in_dir, surf.face_normal) > 0.0f));
    BsdfSample {
        in_dir: in_dir,
        pdf: if valid { pdf } else { make_spectral_pdf_zero() },
        cos: cos,
        color: if valid { color } else { make_spectral_weight_zero() }
    }
}

// Creates a fully absorbing BSDF that behaves like a black body
fn @make_black_bsdf() -> Bsdf {
    Bsdf {
        eval:   @ |_, _, _| make_spectral_weight_zero(),
        pdf:    @ |_, _, _| make_spectral_pdf_zero(),
        sample: @ |_, out_dir, _, _| BsdfSample { in_dir: out_dir, pdf: make_spectral_pdf_one(), cos: 1.0f, color: make_spectral_weight_zero() },
        is_specular: false
    }
}

// Creates a purely diffuse BSDF
fn @make_diffuse_bsdf(math: Intrinsics, surf: SurfaceElement, kd: Spectrum) -> Bsdf {
    Bsdf {
        eval: @ |in_dir, out_dir, wvl| {
            spectrum_eval(spectrum_mulf(kd, 1.0f / flt_pi), wvl)
        },
        pdf: @ |in_dir, out_dir, _| {
            make_spectral_pdf_splat(cosine_hemisphere_pdf(positive_cos(in_dir, surf.local.col(2))))
        },
        sample: @ |rnd, out_dir, wvl, _| {
            let sample = sample_cosine_hemisphere(math, randf(rnd), randf(rnd));
            let color  = spectrum_eval(spectrum_mulf(kd, 1.0f / flt_pi), wvl);
            let pdf    = make_spectral_pdf_splat(sample.pdf);
            make_bsdf_sample(surf, mat3x3_mul(surf.local, sample.dir), pdf, sample.dir.z, color, false)
        },
        is_specular: false
    }
}

// Creates a physically-correct Phong BSDF
fn @make_phong_bsdf(math: Intrinsics, surf: SurfaceElement, ks: Spectrum, ns: f32) -> Bsdf {
    Bsdf {
        eval: @ |in_dir, out_dir, wvl| {
            let cos = positive_cos(in_dir, vec3_reflect(out_dir, surf.local.col(2)));
            spectrum_eval(spectrum_mulf(ks, fastpow/*math.powf*/(cos, ns) * (ns + 2.0f) * (1.0f / (2.0f * flt_pi))), wvl)
        },
        pdf: @ |in_dir, out_dir, _| {
            let cos = positive_cos(in_dir, vec3_reflect(out_dir, surf.local.col(2)));
            make_spectral_pdf_splat(cosine_power_hemisphere_pdf(math, cos, ns))
        },
        sample: @ |rnd, out_dir, wvl, _| {
            let reflect_out = vec3_reflect(out_dir, surf.local.col(2));
            let sample = sample_cosine_power_hemisphere(math, ns, randf(rnd), randf(rnd));
            let in_dir = mat3x3_mul(make_orthonormal_mat3x3(reflect_out), sample.dir);
            let cos = positive_cos(in_dir, surf.local.col(2));
            let color = spectrum_eval(spectrum_mulf(ks, sample.pdf * (ns + 2.0f) / (ns + 1.0f)), wvl);
            make_bsdf_sample(surf, in_dir, make_spectral_pdf_splat(sample.pdf), cos, color, false)
        },
        is_specular: false
    }
}

// Creates a perfect mirror BSDF
// The mirror BSDF is not spectral varying
fn @make_mirror_bsdf(math: Intrinsics, surf: SurfaceElement, ks: Spectrum) -> Bsdf {
    Bsdf {
        eval: @ |in_dir, out_dir, _| make_spectral_weight_zero(),
        pdf:  @ |in_dir, out_dir, _| make_spectral_pdf_zero(),
        sample: @ |rnd, out_dir, wvl, _| {
            let pdf = make_spectral_pdf_splat(1.0f);
            let color = spectrum_eval(ks, wvl);
            make_bsdf_sample(surf, vec3_reflect(out_dir, surf.local.col(2)), pdf, 1.0f, color, false)
        },
        is_specular: true
    }
}

// Creates a perfect glass BSDF
// The glass BSDF is can be spectral varying
fn @make_glass_bsdf(math: Intrinsics, surf: SurfaceElement, n1: RefractiveIndex, n2: RefractiveIndex, ks: Spectrum, kt: Spectrum) -> Bsdf {
    Bsdf {
        eval: @ |in_dir, out_dir, _| make_spectral_weight_zero(),
        pdf:  @ |in_dir, out_dir, _| make_spectral_pdf_zero(),
        sample: @ |rnd, out_dir, wvl, adjoint| {
            let cn1 = n1.eval(wvl.hero);
            let cn2 = n2.eval(wvl.hero);
            let is_varying = n1.is_varying || n2.is_varying;
            let k = if surf.is_entering { cn1 / cn2 } else { cn2 / cn1 };
            let n = surf.local.col(2);
            let cos_i = vec3_dot(out_dir, n);
            let cos2_t = 1.0f - k * k * (1.0f - cos_i * cos_i);

            if cos2_t > 0.0f {
                // Refraction
                let cos_t = math.sqrtf(cos2_t);
                let F = fresnel_factor(k, cos_i, cos_t);
                if (randf(rnd) > F) {
                    let t = vec3_sub(vec3_mulf(n, k * cos_i - cos_t), vec3_mulf(out_dir, k));
                    let adjoint_term = if adjoint { k * k } else { 1.0f };
                    let color = spectrum_eval_adp(spectrum_mulf(kt, adjoint_term), wvl, is_varying);
                    return(make_bsdf_sample(surf, t, make_spectral_pdf_adp(1.0f, is_varying), 1.0f, color, true))
                }
            }
            // Reflection
            make_bsdf_sample(surf, vec3_reflect(out_dir, n),
                make_spectral_pdf_adp(1.0f, is_varying), 1.0f,
                spectrum_eval_adp(ks, wvl, is_varying), false)
        },
        is_specular: true
    }
}

// Creates a BSDF that interpolates between two other BSDFs
fn @make_mix_bsdf(mat1: Bsdf, mat2: Bsdf, k: f32) -> Bsdf {
    Bsdf {
        eval: @ |in_dir, out_dir, wvl|
            spectral_weight_lerp(mat1.eval(in_dir, out_dir, wvl),
                                mat2.eval(in_dir, out_dir, wvl),
                                k),
        pdf: @ |in_dir, out_dir, wvl|
            spectral_pdf_lerp(mat1.pdf(in_dir, out_dir, wvl),
                            mat2.pdf(in_dir, out_dir, wvl),
                            k),
        sample: @ |rnd, out_dir, wvl, adjoint| {
            let (sample, pdf, color) = if randf(rnd) >= k {
                let s = mat1.sample(rnd, out_dir, wvl, adjoint);
                let p = spectral_pdf_lerp(s.pdf, mat2.pdf(s.in_dir, out_dir, wvl), k);
                let c = spectral_weight_lerp(s.color, mat2.eval(s.in_dir, out_dir, wvl), k);
                (s, p, c)
            } else {
                let s = mat2.sample(rnd, out_dir, wvl, adjoint);
                let p = spectral_pdf_lerp(mat1.pdf(s.in_dir, out_dir, wvl), s.pdf, k);
                let c = spectral_weight_lerp(mat1.eval(s.in_dir, out_dir, wvl), s.color, k);
                (s, p, c)
            };
            BsdfSample { in_dir: sample.in_dir, pdf: pdf, cos: sample.cos, color: color }
        },
        is_specular: mat1.is_specular & mat2.is_specular
    }
}

// Images are discrete collections of pixels with spectrals
struct Image {
    pixels:   fn (i32, i32) -> Spectrum,
    width:    i32,
    height:   i32
}

struct BorderHandling {
    horz: fn (Intrinsics, f32) -> f32,
    vert: fn (Intrinsics, f32) -> f32
}

type Texture = fn (Vec2) -> Spectrum;
type ImageFilter = fn (Intrinsics, Image, Vec2) -> Spectrum;

fn @make_image(pixels: fn (i32, i32) -> Spectrum, width: i32, height: i32) -> Image {
    Image {
        pixels:   pixels,
        width:    width,
        height:   height
    }
}

fn @make_image_black(width: i32, height: i32) -> Image {
    make_image(@|_,_|{ make_spectrum_none() }, width, height)
}

fn @make_image_rgba32(math: Intrinsics, pixels: fn (i32, i32, i32) -> f32, width: i32, height: i32) -> Image {
    Image {
        pixels: @ |x, y| {
            let r = pixels(x,y,0);
            let g = pixels(x,y,1);
            let b = pixels(x,y,2);
            make_coeff_spectrum(math,r,g,b)
        },
        width:    width,
        height:   height
    }
}

fn @make_clamp_border() -> BorderHandling {
    let clamp = @ |math, x| math.fminf(1.0f, math.fmaxf(0.0f, x));
    BorderHandling {
        horz: clamp,
        vert: clamp
    }
}

fn @make_repeat_border() -> BorderHandling {
    let repeat = @ |math, x| x - math.floorf(x);
    BorderHandling {
        horz: repeat,
        vert: repeat
    }
}

fn @make_nearest_filter() -> ImageFilter {
    @ |math, img, uv| {
        img.pixels(math.min((uv.x * img.width  as f32) as i32, img.width  - 1),
                   math.min((uv.y * img.height as f32) as i32, img.height - 1))
    }
}

fn @make_bilinear_filter() -> ImageFilter {
    @ |math, img, uv| {
        let u = uv.x * img.width as f32;
        let v = uv.y * img.height as f32;
        let x0 = math.min(u as i32, img.width  - 1);
        let y0 = math.min(v as i32, img.height - 1);
        let x1 = math.min(x0 + 1, img.width  - 1);
        let y1 = math.min(y0 + 1, img.height - 1);
        let kx = u - (u as i32 as f32);
        let ky = v - (v as i32 as f32);

        let p00 = img.pixels(x0, y0);
        let p10 = img.pixels(x1, y0);
        let p01 = img.pixels(x0, y1);
        let p11 = img.pixels(x1, y1);

        let interp = @ |x00, x10, x01, x11| spectrum_lerp(spectrum_lerp(x00, x10, kx), spectrum_lerp(x01, x11, kx), ky);
        interp(p00, p10, p01, p11)
    }
}

fn @make_texture(math: Intrinsics, border: BorderHandling, filter: ImageFilter, image: Image) -> Texture {
    @ |uv| {
        let u = border.horz(math, uv.x);
        let v = border.vert(math, uv.y);
        filter(math, image, make_vec2(u, v))
    }
}

fn @eval_checkerboard_texture(math: Intrinsics, border: BorderHandling, color0: Spectrum, color1: Spectrum, uv: Vec2) -> Spectrum {
    let u = border.horz(math, uv.x);
    let v = border.vert(math, uv.y);
    let x = 2 *(((u * 2.0f) as i32) % 2) - 1;
    let y = 2 *(((v * 2.0f) as i32) % 2) - 1;
    if x*y == 1 {
        color0
    } else {
        color1
    }
}

fn @make_checkerboard_texture(math: Intrinsics, border: BorderHandling, color0: Spectrum, color1: Spectrum) -> Texture {
    @ |uv| eval_checkerboard_texture(math, border, color0, color1, uv)
}

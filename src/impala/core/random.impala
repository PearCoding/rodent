// Change these variables to use another random number generator
//type RndState = u64;
//static randi = mwc64x;
type RndState = u32;
static randi = xorshift;

fn @randf(rnd: &mut RndState) -> f32 {
    // Assumes IEEE 754 floating point format
    let x = randi(rnd) as u32;
    bitcast[f32]((127u32 << 23u32) | (x & 0x7FFFFFu32)) - 1.0f
}

// MWC64X: http://cas.ee.ic.ac.uk/people/dt10/research/rngs-gpu-mwc64x.html
fn @mwc64x(seed: &mut u64) -> i32 {
    let c = *seed >> 32u64;
    let x = *seed & 0xFFFFFFFFu64;
    *seed = x * 4294883355u64 + c;
    (x as i32)^(c as i32)
}

// 32-bit version of the xorshift random number generator
fn @xorshift(seed: &mut u32) -> i32 {
    let mut x = *seed;
    x = select(x == 0u32, 1u32, x);
    x ^= x << 13u32;
    x ^= x >> 17u32;
    x ^= x << 5u32;
    *seed = x;
    x as i32
}

// Result of sampling a direction
struct DirSample {
    dir: Vec3,
    pdf: f32
}

fn @make_dir_sample(math: Intrinsics, c: f32, s: f32, phi: f32, pdf: f32) -> DirSample {
    let x = s * math.cosf(phi);
    let y = s * math.sinf(phi);
    let z = c;
    DirSample {
        dir: make_vec3(x, y, z),
        pdf: pdf
    }
}

fn @spherical_from_dir(math: Intrinsics, dir: Vec3) -> (f32, f32) {
    let theta = math.acosf(dir.z);
    let phi = math.atan2f(dir.y, dir.x);
    (theta, phi)
}

// Samples a point uniformly on a triangle
fn @sample_triangle(mut u: f32, mut v: f32, v0: Vec3, v1: Vec3, v2: Vec3) -> Vec3 {
    if (u + v > 1.0f) {
        u = 1.0f - u;
        v = 1.0f - v;
    }
    vec3_add(
        vec3_add(vec3_mulf(v0, 1.0f - v - u),
                 vec3_mulf(v1, u)),
        vec3_mulf(v2, v)
    )
}

// Probability density function for uniform sphere sampling
fn @uniform_sphere_pdf() -> f32 { 1.0f / (4.0f * flt_pi) }

// Samples a direction uniformly on a sphere
fn @sample_uniform_sphere(math: Intrinsics, u: f32, v: f32) -> DirSample {
    let c = 2.0f * v - 1.0f;
    let s = math.sqrtf(1.0f - c * c);
    let phi = 2.0f * flt_pi * u;
    make_dir_sample(math, c, s, phi, uniform_sphere_pdf())
}

// Probability density function for cosine weighted hemisphere sampling
fn @cosine_hemisphere_pdf(c: f32) -> f32 { c * (1.0f / flt_pi) }

// Samples a direction on a hemisphere proportionally to the cosine with the surface normal
fn @sample_cosine_hemisphere(math: Intrinsics, u: f32, v: f32) -> DirSample {
    let c = math.sqrtf(1.0f - v);
    let s = math.sqrtf(v);
    let phi = 2.0f * flt_pi * u;
    make_dir_sample(math, c, s, phi, cosine_hemisphere_pdf(c))
}

// Probability density function for cosine-power weighted hemisphere sampling
fn @cosine_power_hemisphere_pdf(math: Intrinsics, c: f32, k: f32) -> f32 {
    fastpow/*math.powf*/(c, k) * (k + 1.0f) * (1.0f / (2.0f * flt_pi))
}

// Samples a direction on a hemisphere proportionally to the power of the cosine with the surface normal
fn @sample_cosine_power_hemisphere(math: Intrinsics, k: f32, u: f32, v: f32) -> DirSample {
    let c = math.fminf(fastpow/*math.powf*/(v, 1.0f / (k + 1.0f)), 1.0f);
    let s = math.sqrtf(1.0f - c * c);
    let phi = 2.0f * flt_pi * u;
    // We have:
    // pow(c, k) = pow(pow(v, 1 / (k + 1)), k)
    //           = pow(v, k / (k + 1))
    //           = v * pow(v, -1 / (k + 1))
    //           = v / c
    let pow_c_k = select(c != 0.0f, v / c, 0.0f);
    let pdf = pow_c_k * (k + 1.0f) * (1.0f / (2.0f * flt_pi));
    make_dir_sample(math, c, s, phi, pdf)
}

// Initializer for Bernstein's hash function
fn @bernstein_init() -> u32 { 5381u32 }

// Bernstein's hash function
fn @bernstein_hash(mut h: u32, d: u32) -> u32 {
    h = (h * 33u32) ^ ( d           & 0xFFu32);
    h = (h * 33u32) ^ ((d >>  8u32) & 0xFFu32);
    h = (h * 33u32) ^ ((d >> 16u32) & 0xFFu32);
    h = (h * 33u32) ^ ((d >> 24u32) & 0xFFu32);
    h
}

// Initializer for the FNV hash function
fn @fnv_init() -> u32 { 0x811C9DC5u32 }

// FNV hash function
fn @fnv_hash(mut h: u32, d: u32) -> u32 {
    h = (h * 16777619u32) ^ ( d           & 0xFFu32);
    h = (h * 16777619u32) ^ ((d >>  8u32) & 0xFFu32);
    h = (h * 16777619u32) ^ ((d >> 16u32) & 0xFFu32);
    h = (h * 16777619u32) ^ ((d >> 24u32) & 0xFFu32);
    h
}

// Returns the probability to continue given the contribution of a path
fn @russian_roulette(c: SpectralWeight, clamp: f32) -> f32 {
    //let prob = 2.0f * color_luminance(c);
    let prob = 2.0f * spectral_weight_approx_luminance(c);
    if prob > clamp { clamp } else { prob }
}

// Sample spectral range
fn @sample_uniform_spectral_sample(math: Intrinsics, u: f32, wavelength_start: f32, wavelength_end: f32) -> SpectralSample {
    let span = wavelength_end-wavelength_start;
    let hero = u*span;
    let delta = span/4.0f;
    let wavelengths = make_spectral_wavelength(hero+wavelength_start,
        math.fmodf(hero+1.0f*delta, span)+wavelength_start,
        math.fmodf(hero+2.0f*delta, span)+wavelength_start,
        math.fmodf(hero+3.0f*delta, span)+wavelength_start);
    let pdf = spectral_uniform_sample_pdf(u, wavelength_start, wavelength_end);
    let pdfs = make_spectral_pdf(pdf, pdf, pdf, pdf);

    make_spectral_sample(wavelengths, pdfs, make_spectral_weight(1.0f/pdfs.hero, 1.0f/pdfs.s1, 1.0f/pdfs.s2, 1.0f/pdfs.s3))
}

// Returns uniform pdf for wavelength range
fn @spectral_uniform_sample_pdf(u: f32, wavelength_start: f32, wavelength_end: f32) -> f32 {
    1.0f/(wavelength_end - wavelength_start)
}

// Based on "An Improved Technique for Full Spectral Rendering"
// by Radziszewski, Boryczko, and Alda
// Only valid for range 360 - 830
fn @sample_rgb_spectral_sample(math: Intrinsics, u: f32) -> SpectralSample {
    let sample_wvl = @ |k| { 538.0f - atanhf(math, 0.8569106254698279f - 1.8275019724092267f * k) * 138.88888888888889f };

    let wavelengths = make_spectral_wavelength(sample_wvl(u),
        sample_wvl(math.fmodf(u+1.0f/4.0f, 1.0f)),
        sample_wvl(math.fmodf(u+2.0f/4.0f, 1.0f)),
        sample_wvl(math.fmodf(u+3.0f/4.0f, 1.0f)));

    let pdfs = make_spectral_pdf(
        spectral_rgb_sample_pdf_wvl(math, wavelengths.hero),
        spectral_rgb_sample_pdf_wvl(math, wavelengths.s1),
        spectral_rgb_sample_pdf_wvl(math, wavelengths.s2),
        spectral_rgb_sample_pdf_wvl(math, wavelengths.s3));

    make_spectral_sample(wavelengths, pdfs, make_spectral_weight(1.0f/pdfs.hero, 1.0f/pdfs.s1, 1.0f/pdfs.s2, 1.0f/pdfs.s3))
}

fn @spectral_rgb_sample_pdf_wvl(math: Intrinsics, wvl: f32) -> f32 {
    let t = sechf(math, 0.0072f * (wvl - 538.0f));
    0.003939804229326285f * t * t
}

// Easy selector
fn @sample_default_spectral_sample(math: Intrinsics, u: f32) -> SpectralSample {
    sample_rgb_spectral_sample(math, u)
    //sample_uniform_spectral_sample(math, u, CIE_WAVELENGTH_START, CIE_WAVELENGTH_END)
}

